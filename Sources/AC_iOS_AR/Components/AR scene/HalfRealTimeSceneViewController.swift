//
//  HalfRealTimeSceneViewController.swift
//  YaPlace
//
//  Created by Rustam Shigapov on 11/09/2019.
//  Copyright (c) 2019 SKZ. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation
import ARKit
import CoreLocation
import CoreMotion
import Combine

protocol HalfRealTimeSceneDisplayLogic: class {
    
    func displayNodes(viewModel: HalfRealTimeScene.Nodes.ViewModel)
    func displayClusters(viewModel: HalfRealTimeScene.Clusters.ViewModel)
    func displayStart(viewModel: HalfRealTimeScene.Start.ViewModel)
    func displayStop(viewModel: HalfRealTimeScene.Stop.ViewModel)
    func displayMarkers2DMovable(viewModel: HalfRealTimeScene.Markers2DMovable.ViewModel)
    
    func displayLocalizeData(viewModel: HalfRealTimeScene.LocalizeData.ViewModel)
    func displayLocalize(viewModel:  HalfRealTimeScene.Localize.ViewModel)
    func displayARObjects(viewModel:  HalfRealTimeScene.ARObjects.ViewModel)
    
    func displayDelegate(viewModel:  HalfRealTimeScene.Delegate.ViewModel)
    func displayDelete(viewModel:  HalfRealTimeScene.Delete.ViewModel)
    
    func displayStickerFilters(viewModel: HalfRealTimeScene.StickerFilters.ViewModel)
}

class HalfRealTimeSceneViewController: UIViewController {
    
    static let shared = HalfRealTimeSceneViewController()
    
    //MARK: Properties
    var interactor: HalfRealTimeSceneBusinessLogic?
    
    var router: (NSObjectProtocol & HalfRealTimeSceneRoutingLogic & HalfRealTimeSceneDataPassing)?
    
    private var dataIsTaken: Bool = true
    private var arBackView: UIView?
    
    private let notificationCenter = NotificationCenter.default
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        HalfRealTimeSceneConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.makeSettings()
        self.setupNotificationCenter()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        print("AR viewWillAppear")
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        print("AR viewWillDisappear")
        self.stopAR()
    }
    
    private func makeSettings() {
        let request = HalfRealTimeScene.Settings.Request(pinViewSize: self.view.frame.size)
        self.interactor?.makeSettings(request: request)
    }
    
    private func setupNotificationCenter() {
        //https://dev.to/sadra/how-to-detect-when-app-moves-to-background-or-foreground
        notificationCenter.addObserver(self, selector: #selector(appBecameActive), name: UIApplication.didBecomeActiveNotification, object: nil)
        notificationCenter.addObserver(self, selector: #selector(appBecameNotActive), name: UIApplication.willResignActiveNotification, object: nil)
        UIDevice.current.beginGeneratingDeviceOrientationNotifications()
    }
    @objc func appBecameNotActive() {
        self.viewWillDisappear(true)
    }
    @objc func appBecameActive() {
        self.viewWillAppear(true)
    }
    
    private func showClusters(clusters: [UIView]?) {
        clearClusters() {
            if let clusterViews = clusters, clusterViews.count > 0 {
                clusterViews.forEach { self.view.addSubview($0) }
            }
        }
    }
    private func clearClusters(completion: @escaping () -> Void) {
        
        guard Thread.isMainThread else {
            DispatchQueue.main.async { [weak self] in
                self?.clearClusters(completion: completion)
            }
            return
        }
        
        for v in self.view.subviews {
            if v.tag == Tags.value.StickerMarkerClusterView.rawValue {
                v.removeFromSuperview()
            }
        }
        
        completion()
    }

    
    private func showNodes(nodes: [UIView]?, frames: [UIView]?, completion: (() -> Void )? = nil) {
        self.clearNodes {
            guard let viewForAR = self.arBackView else { return }
            if let nodesViews = nodes, nodesViews.count > 0 {
                print("kkk view - \(self.view.frame.size)")
                
                for nodeView in nodesViews {
                    viewForAR.addSubview(nodeView) //nodesView
                }
            }
            
            if let frameViews = frames, frameViews.count > 0 {
                for frameView in frameViews {
                    viewForAR.addSubview(frameView)
                }
            }
            
            completion?()
        }
    }
    
    private func clearNodes(completion: @escaping () -> Void) {
        guard let viewForAR = self.arBackView else { return }
        
        guard Thread.isMainThread else {
            DispatchQueue.main.async { [weak self] in
                self?.clearNodes(completion: completion)
            }
            return
        }
        
        for v in viewForAR.subviews {
            if v.tag == Tags.value.HalfRealtimeStickerMarkerView.rawValue || v.tag == Tags.value.StickerMarkerFrameView.rawValue {
                v.removeFromSuperview()
            }
        }
        
        completion()
    }
    
}

extension HalfRealTimeSceneViewController: HalfRealTimeSceneDisplayLogic {
    func displayMarkers2DMovable(viewModel: HalfRealTimeScene.Markers2DMovable.ViewModel) {
        //something for 2D markers after moving
        
        // MARK: show info stickers
    }
    
    
    
    func displayNodes(viewModel: HalfRealTimeScene.Nodes.ViewModel) {
        self.showNodes(nodes: viewModel.views, frames: viewModel.frames)
    }
    
    func displayClusters(viewModel: HalfRealTimeScene.Clusters.ViewModel) {
        self.showClusters(clusters: viewModel.clusters)
    }
    
    func displayStart(viewModel: HalfRealTimeScene.Start.ViewModel) {
        print("Start")
    }
    
    func displayStop(viewModel: HalfRealTimeScene.Stop.ViewModel) {
        print("Stop")
    }
    
    func displayLocalizeData(viewModel: HalfRealTimeScene.LocalizeData.ViewModel) {
        self.dataIsTaken = false
        print("HalfRealTimeScene.LocalizeData completion saved")
    }
    
    func displayLocalize(viewModel:  HalfRealTimeScene.Localize.ViewModel) {
        print("HalfRealTimeScene.Localize finished")
    }
    
    func displayARObjects(viewModel:  HalfRealTimeScene.ARObjects.ViewModel) {
        print("HalfRealTimeScene.ARObjects finished")
    }
    
    func displayDelegate(viewModel:  HalfRealTimeScene.Delegate.ViewModel) {
        print("HalfRealTimeScene.Delegate.ViewModel")
    }
    
    func displayDelete(viewModel:  HalfRealTimeScene.Delete.ViewModel) {
        print("HalfRealTimeScene.Delete.ViewModel")
    }
    
    func displayStickerFilters(viewModel: HalfRealTimeScene.StickerFilters.ViewModel) {
        print("HalfRealTimeScene.StickerFilters.ViewModel")
    }
    
}

//ARViewModel
//MARK: SDK block
extension HalfRealTimeSceneViewController {
    
    func start() {
        UIApplication.shared.isIdleTimerDisabled = true
        self.clearNodes {
            let startRequest = HalfRealTimeScene.Start.Request(arBackView: self.arBackView)
            self.interactor?.start(request: startRequest)
        }
    }

    func stopAR() {
        let stopRequest = HalfRealTimeScene.Stop.Request()
        self.interactor?.stop(request: stopRequest)
    }

    func set(arView backView: UIView, stickerDelegate: StickerDelegate?) {
        self.arBackView = backView
        let request = HalfRealTimeScene.Delegate.Request(stickerDelegate: stickerDelegate)
        interactor?.setDelegate(request: request)
    }
    
    func set(filters: [String:Bool]) {
        interactor?.updateFilters(request: HalfRealTimeScene.StickerFilters.Request(filters: filters))
    }
    
    func getLocalizationData(completion: @escaping (_ imageData: Data?, _ location: CLLocation?, _ photoInfo: [String:Any]?, _ pose: Pose?) -> Void) {
        let request = HalfRealTimeScene.LocalizeData.Request(completion: completion)
        interactor?.getLocalizeData(request: request)
    }
    
    func show(localizationResult: LocalizationResult) {
        let request = HalfRealTimeScene.ARObjects.Request(localizationResult: localizationResult)
        interactor?.showARObjects(request: request)
    }
    
    func delete(by stickerID: Int) {
        let request = HalfRealTimeScene.Delete.Request(stickerID: stickerID)
        interactor?.delete(request: request)
    }
    
    func takePhoto(completion: @escaping (Data?, NSError?, UIDeviceOrientation?) -> Void) {
        let request = HalfRealTimeScene.TakeNextPhoto.Request(completion: completion)
        self.interactor?.takeNextPhoto(request: request)
    }

}
