//
// Sticker.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct Sticker: Codable {

    public var stickerId: String
    public var stickerText: String
    public var stickerType: String
    public var stickerSubtype: String?
    public var path: String

    public init(stickerId: String, stickerText: String, stickerType: String, stickerSubtype: String? = nil, path: String) {
        self.stickerId = stickerId
        self.stickerText = stickerText
        self.stickerType = stickerType
        self.stickerSubtype = stickerSubtype
        self.path = path
    }
    public var additionalProperties: [String:String] = [:]

    public subscript(key: String) -> String? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(stickerId, forKey: "sticker_id")
        try container.encode(stickerText, forKey: "sticker_text")
        try container.encode(stickerType, forKey: "sticker_type")
        try container.encodeIfPresent(stickerSubtype, forKey: "sticker_subtype")
        try container.encode(path, forKey: "path")
        try container.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        stickerId = try container.decode(String.self, forKey: "sticker_id")
        stickerText = try container.decode(String.self, forKey: "sticker_text")
        stickerType = try container.decode(String.self, forKey: "sticker_type")
        stickerSubtype = try container.decodeIfPresent(String.self, forKey: "sticker_subtype")
        path = try container.decode(String.self, forKey: "path")
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("sticker_id")
        nonAdditionalPropertyKeys.insert("sticker_text")
        nonAdditionalPropertyKeys.insert("sticker_type")
        nonAdditionalPropertyKeys.insert("sticker_subtype")
        nonAdditionalPropertyKeys.insert("path")
        additionalProperties = try container.decodeMap(String.self, excludedKeys: nonAdditionalPropertyKeys)
    }


}

